## Week Three Recap

### Instructions
Fork this repository. Be sure to pull the latest changes to your local repo. Answer the questions to the best of your ability.

Try to answer them with limited amount of external research. These questions cover the majority of what we've learned this week.

Note: When you're done, submit a PR with a reflection in the comments about how this exercise went for you.

### Questions

1. What is the entry at the command line to create a new rails app?

  rails new << project_name >> << options >>

2. What do Models generally inherit from in rails?

  ApplicationRecord

3. What do Controllers generally inherit from in a rails project?

  ApplicationController

4. How would I create a route if I wanted to see a specific horse in my routes fitle assuming I'm sticking to standard conventions and that I didn't want other CRUD functionality?

  resources :horses, only: [:show]

5. What rake task is useful when looking at routes, and what information does it give you?

  Rake routes gives you the prefix, the HTTP verb, the url, and the ways to call the path in erb.

6. What is an example of a route helper? When would you use them?



7. What's the difference between what `_url` and `_path` return when combined with a routes prefix?

  '_url' will return the appendage to the url (e.g. "/jobs"), whereas the path will return the named path in rails (e.g. "jobs_path")

8. What are strong params and why are the necessary?

  Strong params are predefined hash keys in the params, the only ones that can be submitted with an HTTP request.
  This is useful so that other parameters cannot be written into the url by a user and used for adverse purposes.

9. What role does `form_for` play in helping us create our forms?

  'form_for' automatically interprets that, by submitting the form, it is adding the values contained
  therein as parameters for the "create" method of a certain controller, pertaining to the object type
  of the arguements(s) given (however, where the form submits to specifically can be manipulated).

10. How does `form_for` know where to submit the user's input?

  it writes the information given to the instance variable(s) that are given as arguements and submits
  it to the "create" method of that controller.

11. Create a form using a `form_for` helper to create a new `Horse`.

  <%= form_for(@horse) do |f| %>
    <%= f.label :name %>
    <%= f.text_field :name %>

    <%= f.label :breed %>
    <%= f.text_field :breed %>

    <%= f.submit %>
  <% end %>

12. Why do we want to validate our models?

  In the class definition, we can put "validates_presence_of :attribute", or just "validates :attribute, presence: true".
  Instead of presence, we can also validate uniqueness, confirmation, exclusion, etc.
