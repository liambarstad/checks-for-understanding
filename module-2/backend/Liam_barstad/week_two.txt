## Week Two - Module 2 Recap

Fork this respository. Answer the questions to the best of your ability. Try to answer them with limited amount of external research. These questions cover the majority of what we've learned this week (which is a TON - YOU are a web developer!!!).

Note: When you're done, submit a PR.

1. At a high level, what is ActiveRecord? What does it do/allow you to do?

  ActiveRecord streamlines relationships between ruby objects, and, by extension, database elements. It also
  provides the most quick, concise, and readable methods for handling basic functions dealing with datasets
  and relationships.

2. Assume you have the following model:

```ruby
class Team << ActiveRecord::Base
end
```

What are some methods you can call on `Team`? If these methods aren't defined in the class, how do you have access to them?

  - Team.all
  - Team.create(<< parameters >>)
  - Team.where(:<< instance variable >> = << value >>)
  - Team.maximum(:<< instance variable >>)
  - Team.pluck(:<< instance variable >>)
We have access to these methods by default because they are defined in the ActiveRecord parent class, the
requirements for which are initialized when a new rails application is created through the terminal (required
in Gemfile etc. by default).

3. Assume that in your database, a team has the following attributes: "id", "name", owner_id". How would you find the name of a team with an id of 4? Assuming your class only included the code from question 2, how could you find the owner of the same team?

  team = Team.find(4)
  owner_id = team.owner_id

4. Assume that you added a line to your `Team` class as follows:

```ruby
class Team << ActiveRecord::Base
  belongs_to :owner
end
```

Now how would you find the owner of the team with an id of 4?

  team = Team.find(4)
  team_owner = team.owner

5. In a database that's holding students and teachers, what will be the relationship between students and teachers? Draw the schema diagram.

  Students    Student_Teachers   Teachers
  id     <=   student_id         id
  name        teacher_id  =>     name

6. Define foreign key, primary key, and schema.

 - Foreign key = an integer id in a table that acts as a reference to the primary key of a specific element
   in another table.
 - Primary key = the unique identifier for each element in a table.
 - Schema = created and updated as migrations are run, shows the current state of the database with column
   values, types, and relationships

7. Describe the relationship between a foreign key on one table and a primary key on another table.

  - A foreign key in one table will have the value of a primary key on another table (if the primary key
    is not composite) if it wants to reference that element on the other table.

8. What are the parts of an HTTP response?

### Optional Questions

1. Name your five favorite ActiveRecord methods (i.e. methods your models inherit from ActiveRecord) and describe what they do.
2. Name your three favorite ActiveRecord rake tasks and describe what they do.
3. What two columns does `t.timestamps null: false` create in our database?

  t.created_at and t.updated_at

4. In a database that's holding schools and teachers, what will be the relationship between schools and teachers?

  A school has many teachers

5. In the same database, what will you need to do to create this relationship (draw a schema diagram)?

  Teachers      Schools
  id            id
  school_id =>

6. Give an example of when you might want to store information besides ids on a join table.

  If there is an actual (not abstract) intermediary that has information and joins both tables adequately.
  An example of this might be a potential Classes table that would join Students and Teachers

7. Describe and diagram the relationship between patients and doctors.

  A doctor has many patients

8. Describe and diagram the relationship between museums and original_paintings.

  A museum has many original_paintings

9. What could you see in your code that would make you think you might want to create a partial?

  If there is code that is being used more than once in exactly the same way, a partial should be created
  and referenced.
